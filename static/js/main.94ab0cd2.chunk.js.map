{"version":3,"sources":["assets/images/Image_not_available.png","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Selection.js","repositories/univesal-tutorial-repo.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","imageSize","shortName","sizes","split","className","style","width","height","alt","src","toLowerCase","onError","e","currentTarget","onerror","imageNotAvaliable","CardList","countries","map","user","i","country_name","country_short_name","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflow","border","window","innerHeight","children","Selection","list","defaultValue","rest","Form","Select","item","value","title","API_UNIVERSAL_AUTH_TOKEN","UniversalTutorialRepository","axios","get","headers","then","response","data","sessionStorage","getItem","DEFAULT_IMAGE_SIZE","App","onSearchChange","event","setState","target","onSizeChange","state","getAccessToken","setItem","auth_token","getCountries","this","filteredCountries","filter","country","includes","length","textAlign","justifyContent","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94ab0cd2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Image_not_available.340253f9.png\";","import React from 'react';\nimport imageNotAvaliable from '../assets/images/Image_not_available.png'\n\nconst Card = ({ name, imageSize, shortName, }) => {\n  const sizes = imageSize.split('x');\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw1 shadow-5' style={{width:+sizes[0] + 40, height:+sizes[1] +40}}>\n      <img alt='countries' src={`https://flagcdn.com/${imageSize}/${shortName.toLowerCase()}.png`} onError={(e) => {\n         e.currentTarget.onerror = null; // prevents looping\n        e.currentTarget.src = imageNotAvaliable;\n        \n      }} />\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ countries, imageSize }) => {\n  return (\n    <div>\n      {\n        countries.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              imageSize = {imageSize}\n              name={countries[i].country_name}\n              shortName={countries[i].country_short_name}\n\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search countries'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: window.innerHeight - 200, }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","\r\nimport {Form} from 'react-bootstrap'\r\n\r\nconst Selection = ({ list = [], defaultValue, onChange, ...rest }) => {\r\n    return (\r\n        <Form.Select aria-label=\"Default select example\" defaultValue={defaultValue} onChange={onChange}{...rest}>\r\n            {list.map(item => {\r\n                return <option key ={item.value}  value={item.value} > {item.title }</option>\r\n            })}\r\n\r\n</Form.Select>\r\n    )\r\n}\r\nexport default Selection","import axios from 'axios';\r\n\r\nconst TOKEN = 'YH3VyqLiNTTQAX17wgRw5hOb_9YyqMM6jqcOnmWXc2ypIIOx6uhAqCK5QiW-RMGjU-s'\r\nexport const API_UNIVERSAL_AUTH_TOKEN = 'apiUneversalAuthToken';\r\nexport class UniversalTutorialRepository {\r\n    static getAccessToken() {\r\n        return axios.get('https://www.universal-tutorial.com/api/getaccesstoken', {\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"api-token\": TOKEN,\r\n                \"user-email\": \"elvinahmadov0@gmail.com\"\r\n            }\r\n        }).then(response=>response.data)\r\n    }\r\n\r\n    static getCountries() {\r\n        return axios.get('https://www.universal-tutorial.com/api/countries/', {\r\n            headers: {\r\n                  \"Authorization\": `Bearer ${sessionStorage.getItem(API_UNIVERSAL_AUTH_TOKEN)}`,\r\n            \"Accept\": \"application/json\"\r\n            }\r\n        }).then(response=>response.data)\r\n    }\r\n}","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Selection from '../components/Selection';\nimport './App.css';\nimport {UniversalTutorialRepository, API_UNIVERSAL_AUTH_TOKEN} from '../repositories/univesal-tutorial-repo'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst DEFAULT_IMAGE_SIZE = '32x24'\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      countries: [],\n      searchfield: '',\n      imageSize: DEFAULT_IMAGE_SIZE\n    }\n  }\n\n  componentDidMount() {\n    \nUniversalTutorialRepository.getAccessToken()\n  .then(response => {\n        sessionStorage.setItem(API_UNIVERSAL_AUTH_TOKEN, response.auth_token)\n  }).then(() => UniversalTutorialRepository.getCountries()\n    .then(response => {\n      this.setState({\n        countries:response\n      })\n    }));\n  }\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n  onSizeChange = (event) => {\n      this.setState({ imageSize: event.target.value });\n  }\n\n  render() {\n    const { countries, searchfield } = this.state;\n\n    const filteredCountries = countries.filter(country =>{\n      return country.country_name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !countries.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <div className='sticky'>\n       <h1 className='f1'>Countries</h1>\n\n          <div className='wrapper ' >\n\n          <Selection list={[\n            { value: '16x12', title: '16x12' },\n            { value: '32x24', title: '32x24' },\n            { value: '64x48', title: '64x48' },\n            { value: '128x96', title: '128x96' },\n            { value: '256x192', title: '256x192' },\n          ]} \n            defaultValue={DEFAULT_IMAGE_SIZE}\n            onChange={this.onSizeChange}\n            style={{\n              width: '150px',\n              textAlign: 'center',\n              justifyContent:'center'\n            }}\n            className = \" b--green bg-lightest-blue\"\n            />\n          <SearchBox searchChange={this.onSearchChange} />\n\n          </div>\n            \n          </div>\n\n         \n          \n          <div  className = \"content\">\n              <Scroll>\n            <CardList countries={filteredCountries} imageSize={this.state.imageSize }/>\n          </Scroll>\n          </div>\n        \n        </div>\n      );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons'; \n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}